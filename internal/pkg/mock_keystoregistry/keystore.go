// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/keystoreregistry/helpers.go

// Package mock_keystoreregistry is a generated GoMock package.
package mock_keystoreregistry

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKeystore is a mock of Keystore interface
type MockKeystore struct {
	ctrl     *gomock.Controller
	recorder *MockKeystoreMockRecorder
}

// MockKeystoreMockRecorder is the mock recorder for MockKeystore
type MockKeystoreMockRecorder struct {
	mock *MockKeystore
}

// NewMockKeystore creates a new mock instance
func NewMockKeystore(ctrl *gomock.Controller) *MockKeystore {
	mock := &MockKeystore{ctrl: ctrl}
	mock.recorder = &MockKeystoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeystore) EXPECT() *MockKeystoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockKeystore) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockKeystoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeystore)(nil).Close))
}

// CleanPrefix mocks base method
func (m *MockKeystore) CleanPrefix(prefix string) error {
	ret := m.ctrl.Call(m, "CleanPrefix", prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanPrefix indicates an expected call of CleanPrefix
func (mr *MockKeystoreMockRecorder) CleanPrefix(prefix interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanPrefix", reflect.TypeOf((*MockKeystore)(nil).CleanPrefix), prefix)
}

// AtomicAdd mocks base method
func (m *MockKeystore) AtomicAdd(key, value string) {
	m.ctrl.Call(m, "AtomicAdd", key, value)
}

// AtomicAdd indicates an expected call of AtomicAdd
func (mr *MockKeystoreMockRecorder) AtomicAdd(key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicAdd", reflect.TypeOf((*MockKeystore)(nil).AtomicAdd), key, value)
}

// WatchPutPrefix mocks base method
func (m *MockKeystore) WatchPutPrefix(prefix string, onPut func(string, string)) {
	m.ctrl.Call(m, "WatchPutPrefix", prefix, onPut)
}

// WatchPutPrefix indicates an expected call of WatchPutPrefix
func (mr *MockKeystoreMockRecorder) WatchPutPrefix(prefix, onPut interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchPutPrefix", reflect.TypeOf((*MockKeystore)(nil).WatchPutPrefix), prefix, onPut)
}
