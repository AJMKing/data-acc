// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/registry/volume.go

// Package mocks is a generated GoMock package.
package mocks

import (
	registry "github.com/RSE-Cambridge/data-acc/internal/pkg/registry"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVolumeRegistry is a mock of VolumeRegistry interface
type MockVolumeRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeRegistryMockRecorder
}

// MockVolumeRegistryMockRecorder is the mock recorder for MockVolumeRegistry
type MockVolumeRegistryMockRecorder struct {
	mock *MockVolumeRegistry
}

// NewMockVolumeRegistry creates a new mock instance
func NewMockVolumeRegistry(ctrl *gomock.Controller) *MockVolumeRegistry {
	mock := &MockVolumeRegistry{ctrl: ctrl}
	mock.recorder = &MockVolumeRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVolumeRegistry) EXPECT() *MockVolumeRegistryMockRecorder {
	return m.recorder
}

// Jobs mocks base method
func (m *MockVolumeRegistry) Jobs() ([]registry.Job, error) {
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].([]registry.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Jobs indicates an expected call of Jobs
func (mr *MockVolumeRegistryMockRecorder) Jobs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockVolumeRegistry)(nil).Jobs))
}

// Job mocks base method
func (m *MockVolumeRegistry) Job(jobName string) (registry.Job, error) {
	ret := m.ctrl.Call(m, "Job", jobName)
	ret0, _ := ret[0].(registry.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Job indicates an expected call of Job
func (mr *MockVolumeRegistryMockRecorder) Job(jobName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockVolumeRegistry)(nil).Job), jobName)
}

// AddJob mocks base method
func (m *MockVolumeRegistry) AddJob(job registry.Job) error {
	ret := m.ctrl.Call(m, "AddJob", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJob indicates an expected call of AddJob
func (mr *MockVolumeRegistryMockRecorder) AddJob(job interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockVolumeRegistry)(nil).AddJob), job)
}

// JobAttachHosts mocks base method
func (m *MockVolumeRegistry) JobAttachHosts(jobName string, hosts []string) error {
	ret := m.ctrl.Call(m, "JobAttachHosts", jobName, hosts)
	ret0, _ := ret[0].(error)
	return ret0
}

// JobAttachHosts indicates an expected call of JobAttachHosts
func (mr *MockVolumeRegistryMockRecorder) JobAttachHosts(jobName, hosts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobAttachHosts", reflect.TypeOf((*MockVolumeRegistry)(nil).JobAttachHosts), jobName, hosts)
}

// DeleteJob mocks base method
func (m *MockVolumeRegistry) DeleteJob(jobName string) error {
	ret := m.ctrl.Call(m, "DeleteJob", jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockVolumeRegistryMockRecorder) DeleteJob(jobName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockVolumeRegistry)(nil).DeleteJob), jobName)
}

// AddVolume mocks base method
func (m *MockVolumeRegistry) AddVolume(volume registry.Volume) error {
	ret := m.ctrl.Call(m, "AddVolume", volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolume indicates an expected call of AddVolume
func (mr *MockVolumeRegistryMockRecorder) AddVolume(volume interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockVolumeRegistry)(nil).AddVolume), volume)
}

// Volume mocks base method
func (m *MockVolumeRegistry) Volume(name registry.VolumeName) (registry.Volume, error) {
	ret := m.ctrl.Call(m, "Volume", name)
	ret0, _ := ret[0].(registry.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Volume indicates an expected call of Volume
func (mr *MockVolumeRegistryMockRecorder) Volume(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Volume", reflect.TypeOf((*MockVolumeRegistry)(nil).Volume), name)
}

// AllVolumes mocks base method
func (m *MockVolumeRegistry) AllVolumes() ([]registry.Volume, error) {
	ret := m.ctrl.Call(m, "AllVolumes")
	ret0, _ := ret[0].([]registry.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllVolumes indicates an expected call of AllVolumes
func (mr *MockVolumeRegistryMockRecorder) AllVolumes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllVolumes", reflect.TypeOf((*MockVolumeRegistry)(nil).AllVolumes))
}

// DeleteVolume mocks base method
func (m *MockVolumeRegistry) DeleteVolume(name registry.VolumeName) error {
	ret := m.ctrl.Call(m, "DeleteVolume", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockVolumeRegistryMockRecorder) DeleteVolume(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockVolumeRegistry)(nil).DeleteVolume), name)
}

// UpdateState mocks base method
func (m *MockVolumeRegistry) UpdateState(name registry.VolumeName, state registry.VolumeState) error {
	ret := m.ctrl.Call(m, "UpdateState", name, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState
func (mr *MockVolumeRegistryMockRecorder) UpdateState(name, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockVolumeRegistry)(nil).UpdateState), name, state)
}

// UpdateVolumeAttachments mocks base method
func (m *MockVolumeRegistry) UpdateVolumeAttachments(name registry.VolumeName, attachments map[string]registry.Attachment) error {
	ret := m.ctrl.Call(m, "UpdateVolumeAttachments", name, attachments)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolumeAttachments indicates an expected call of UpdateVolumeAttachments
func (mr *MockVolumeRegistryMockRecorder) UpdateVolumeAttachments(name, attachments interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeAttachments", reflect.TypeOf((*MockVolumeRegistry)(nil).UpdateVolumeAttachments), name, attachments)
}

// DeleteVolumeAttachments mocks base method
func (m *MockVolumeRegistry) DeleteVolumeAttachments(name registry.VolumeName, hostnames []string) error {
	ret := m.ctrl.Call(m, "DeleteVolumeAttachments", name, hostnames)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeAttachments indicates an expected call of DeleteVolumeAttachments
func (mr *MockVolumeRegistryMockRecorder) DeleteVolumeAttachments(name, hostnames interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeAttachments", reflect.TypeOf((*MockVolumeRegistry)(nil).DeleteVolumeAttachments), name, hostnames)
}

// WaitForState mocks base method
func (m *MockVolumeRegistry) WaitForState(name registry.VolumeName, state registry.VolumeState) error {
	ret := m.ctrl.Call(m, "WaitForState", name, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForState indicates an expected call of WaitForState
func (mr *MockVolumeRegistryMockRecorder) WaitForState(name, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForState", reflect.TypeOf((*MockVolumeRegistry)(nil).WaitForState), name, state)
}

// WaitForCondition mocks base method
func (m *MockVolumeRegistry) WaitForCondition(volumeName registry.VolumeName, condition func(*registry.Volume, *registry.Volume) bool) error {
	ret := m.ctrl.Call(m, "WaitForCondition", volumeName, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCondition indicates an expected call of WaitForCondition
func (mr *MockVolumeRegistryMockRecorder) WaitForCondition(volumeName, condition interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCondition", reflect.TypeOf((*MockVolumeRegistry)(nil).WaitForCondition), volumeName, condition)
}

// WatchVolumeChanges mocks base method
func (m *MockVolumeRegistry) WatchVolumeChanges(volumeName string, callback func(*registry.Volume, *registry.Volume)) error {
	ret := m.ctrl.Call(m, "WatchVolumeChanges", volumeName, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchVolumeChanges indicates an expected call of WatchVolumeChanges
func (mr *MockVolumeRegistryMockRecorder) WatchVolumeChanges(volumeName, callback interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchVolumeChanges", reflect.TypeOf((*MockVolumeRegistry)(nil).WatchVolumeChanges), volumeName, callback)
}
